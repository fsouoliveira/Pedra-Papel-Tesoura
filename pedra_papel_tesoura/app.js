// Seleciona todas as opÃ§Ãµes do jogador
const playerOptionList = document.querySelectorAll(".player .option");
// Seleciona todas as opÃ§Ãµes do inimigo
const enemyOptionList = document.querySelectorAll(".enemy .option");

// Adiciona um evento de clique a cada opÃ§Ã£o do jogador
playerOptionList.forEach((option) => {
    option.onclick = () => {
        // Limpa as seleÃ§Ãµes anteriores do jogador
        clearOptions(playerOptionList);

        // Define a opacidade da opÃ§Ã£o selecionada para 1 (visÃ­vel)
        option.style.opacity = "1";
        // Define o atributo data-selected como verdadeiro
        option.setAttribute("data-selected", true);

        // Chama a funÃ§Ã£o que seleciona uma opÃ§Ã£o aleatÃ³ria para o inimigo
        iaEnemy();

        // ObtÃ©m o valor da jogada do jogador
        const movePlayer = option.getAttribute("data-value");
        // ObtÃ©m o valor da jogada do inimigo
        const moveEnemy = iaEnemy();

        // Determina o resultado do jogo
        result(movePlayer, moveEnemy);
    };
});

// FunÃ§Ã£o que seleciona uma opÃ§Ã£o aleatÃ³ria para o inimigo
const iaEnemy = () => {
    // Gera um Ã­ndice aleatÃ³rio
    const optionRandom = Math.floor(Math.random() * enemyOptionList.length);
    // Seleciona a opÃ§Ã£o correspondente ao Ã­ndice aleatÃ³rio
    const optionSelected = enemyOptionList[optionRandom];

    // Limpa as seleÃ§Ãµes anteriores do inimigo
    clearOptions(enemyOptionList);

    // Define a opacidade da opÃ§Ã£o selecionada para 1 (visÃ­vel)
    optionSelected.style.opacity = "1";
    // Define o atributo data-selected como verdadeiro
    optionSelected.setAttribute("data-selected", "true");

    // Retorna o valor da jogada do inimigo
    return optionSelected.getAttribute("data-value");
};

// FunÃ§Ã£o que limpa as seleÃ§Ãµes anteriores
const clearOptions = (optionsList) => {
    optionsList.forEach((option) => {
        // Define o atributo data-selected como falso
        option.setAttribute("data-selected", "false");
        // Define a opacidade das opÃ§Ãµes para 0.5 (meio visÃ­vel)
        option.style.opacity = "0.5";
    });
};

// FunÃ§Ã£o que determina o resultado do jogo
const result = (movePlayer, moveEnemy) => {
    // Seleciona o elemento onde o resultado serÃ¡ exibido
    const resultElement = document.querySelector(".result-container span");

    // Verifica se houve empate
    if (movePlayer === moveEnemy) {
        resultElement.textContent = "VocÃª empatou ðŸ˜’";
    } 
    // Verifica se o jogador perdeu
    else if (
        (movePlayer === "stone" && moveEnemy === "paper") ||
        (movePlayer === "paper" && moveEnemy === "scissor") ||
        (movePlayer === "scissor" && moveEnemy === "stone")
    ) {
        resultElement.textContent = "VocÃª perdeu ðŸ˜­";
    } 
    // Verifica se o jogador ganhou
    else if (
        (movePlayer === "stone" && moveEnemy === "scissor") ||
        (movePlayer === "paper" && moveEnemy === "stone") ||
        (movePlayer === "scissor" && moveEnemy === "paper")
    ) {
        resultElement.textContent = "VocÃª ganhou ðŸ˜Ž";
    }
};
